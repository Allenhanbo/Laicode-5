public class Solution {
  public int[] rainbowSort(int[] array) {
    // T：O（n）
    //S： O（1）
    // [0,i) == -1; [i,j) 0 [j,k] to be confrimed (k,end] 1
    if (array == null || array.length <= 1) {
      return array;
    }
    int i = 0;
    int j = 0;
    int k = array.length - 1;
    while (j <= k) {
      if (array[j] == -1) {
        swap(array, i, j);
        j++;
        i++;
      } else if (array[j] == 0) {
        j++;
      } else {
        swap(array, j, k);
        k--;
      }
    }
    return array;
  }

  private void swap (int[] array, int a, int b) {
    int temp = array[a];
    array[a] = array[b];
    array[b] = temp;
  }
}
//Follow up
how about sort k color--> see 400
in the interview, will only ask for the time and space complexity
